class Solution {
    public String convert(String s, int numRows) {
         if (numRows == 1) {
            return s;
        }
        
        // Create a list of StringBuilders to represent each row
        StringBuilder[] rows = new StringBuilder[Math.min(numRows, s.length())];
        for (int i = 0; i < rows.length; i++) {
            rows[i] = new StringBuilder();
        }
        
        int currentRow = 0;
        boolean goingDown = false;
        
        // Traverse the string and distribute characters across the rows
        for (char c : s.toCharArray()) {
            rows[currentRow].append(c);
            // If we reach the top or bottom row, reverse the direction
            if (currentRow == 0 || currentRow == numRows - 1) {
                goingDown = !goingDown;
            }
            // Move to the next row in the correct direction
            currentRow += goingDown ? 1 : -1;
        }
        
        // Combine all rows into one string
        StringBuilder result = new StringBuilder();
        for (StringBuilder row : rows) {
            result.append(row);
        }
        
        return result.toString();
    }
}
